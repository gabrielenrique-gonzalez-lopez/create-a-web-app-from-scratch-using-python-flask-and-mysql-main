# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '68e3f430-99ba-4203-837c-92ebab3ae898'
  imageRepository-mysql: 'flask-blog-mysql'
  imageRepository-python: 'flask-blog-python'
  containerRegistry: 'registryupmpfg.azurecr.io'
  dockerfilePath-mysql: 'MySQL-DB/Dockerfile'
  dockerfilePath-python: 'part-1/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'registryupmpfg11388849-auth'
  k8sNamespace: 'python-blog'

  # Agent VM image name
  #poolName: 'Azure scale set UPM PFG'
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      #name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an MySQL image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository-mysql)
        dockerfile: $(dockerfilePath-mysql)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        cacheFrom: |
          $(containerRegistry)/$(imageRepository-mysql):latest
        pull: true

    - task: Docker@2
      displayName: Build and push an Flask image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository-python)
        dockerfile: $(dockerfilePath-python)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        cacheFrom: |
          $(containerRegistry)/$(imageRepository-mysql):latest
        pull: true

    - publish: manifests
      artifact: manifests

    


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy 
    pool:
      #name: $(poolName)
      vmImage: $(vmImageName)
    environment: 'python-flask-blog-with-MySQL.python-blog'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: KubernetesManifest@0
            displayName: Deploy MySQL to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'AKS-UPM-PFG-Production-python-blog'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/mysql-db-secret.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-persistance.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-deployment.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository-mysql):$(tag)
          
          - task: KubernetesManifest@0
            displayName: Deploy Flask to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'AKS-UPM-PFG-Production-python-blog'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/flask-deployment.yaml
                $(Pipeline.Workspace)/manifests/flask-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository-python):$(tag)


