# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '68e3f430-99ba-4203-837c-92ebab3ae898'
  imageRepository-mysql: 'flask-blog-mysql'
  imageRepository-python: 'flask-blog-python'
  numberOfContainersToKeep: 10
  secretNameFilter: 'flask-blog-mysql-secrets, flask-blog-mysql-auth-username, flask-blog-mysql-auth-password, flask-blog-secret-key'
  containerRegistry: 'registryupmpfg.azurecr.io'
  dockerfilePath-mysql: 'MySQL-DB/Dockerfile'
  dockerfilePath-python: 'part-2/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'registryupmpfg11388849-auth'
  k8sNamespace: 'python-blog'

  # Agent VM image name
  #poolName: 'Azure scale set UPM PFG'
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      #name: $(poolName)
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an MySQL image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository-mysql)
        dockerfile: $(dockerfilePath-mysql)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        cacheFrom: |
          $(containerRegistry)/$(imageRepository-mysql):latest
        pull: true

    - task: Docker@2
      displayName: Build and push an Flask image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository-python)
        dockerfile: $(dockerfilePath-python)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
        cacheFrom: |
          $(containerRegistry)/$(imageRepository-mysql):latest
        pull: true

    - task: AzureCLI@2
      displayName: Clean up old images
      inputs:
        azureSubscription: 'Azure for Students(96f90eb2-51b8-45a7-8966-e361b1f51855)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Get list of manifests for the repository
          manifests=$(az acr repository show-manifests --name $(containerRegistry) --repository $(imageRepository-mysql) --query "[].{digest: digest, createdTime: createdTime}" --orderby "time_desc" --output tsv)

          # Count the number of manifests
          number_of_manifests=$(echo "$manifests" | wc -l)

          # If there are more manifests than we want to keep, delete the excess ones
          if [ "$number_of_manifests" -gt $(numberOfContainersToKeep) ]; then
            excess=$((number_of_manifests - $(numberOfContainersToKeep)))
            echo "Deleting $excess excess manifests..."

            # Get the list of manifests to delete
            manifests_to_delete=$(echo "$manifests" | tail -n $excess | awk '{print $1}')

            # Delete each manifest
            for manifest in $manifests_to_delete; do
              echo "Deleting manifest $manifest..."
              az acr repository delete --name $(containerRegistry) --image $(imageRepository-mysql)@$manifest --yes
            done
          fi

          # Get list of manifests for the repository
          manifests=$(az acr repository show-manifests --name $(containerRegistry) --repository $(imageRepository-python) --query "[].{digest: digest, createdTime: createdTime}" --orderby "time_desc" --output tsv)

          # Count the number of manifests
          number_of_manifests=$(echo "$manifests" | wc -l)

          # If there are more manifests than we want to keep, delete the excess ones
          if [ "$number_of_manifests" -gt $(numberOfContainersToKeep) ]; then
            excess=$((number_of_manifests - $(numberOfContainersToKeep)))
            echo "Deleting $excess excess manifests..."

            # Get the list of manifests to delete
            manifests_to_delete=$(echo "$manifests" | tail -n $excess | awk '{print $1}')

            # Delete each manifest
            for manifest in $manifests_to_delete; do
              echo "Deleting manifest $manifest..."
              az acr repository delete --name $(containerRegistry) --image $(imageRepository-python)@$manifest --yes
            done
          fi


    - publish: manifests
      artifact: manifests

- stage: Test
  displayName: 'Run Tests'
  dependsOn: Build
  jobs:
  - job: Test
    displayName: 'Run Tests'
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'AKS-Sonarqube-Connection'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'Python-Blog'
        cliProjectName: 'Python-Blog'
        cliSources: '.'
    
    - task: SonarQubeAnalyze@5
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'   


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Test

  jobs:
  - deployment: Deploy
    displayName: Deploy 
    pool:
      #name: $(poolName)
      vmImage: $(vmImageName)
    environment: 'python-flask-blog-with-MySQL.python-blog'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'Azure for Students(96f90eb2-51b8-45a7-8966-e361b1f51855)'
              KeyVaultName: 'AzureKeyVault-Upm-PFG'
              SecretsFilter: $(secretNameFilter)
              RunAsPreJob: true
          - task: KubernetesManifest@0
            displayName: Create MySQL ROOT Password secret
            inputs:
              action: createSecret
              secretName: 'flask-blog-mysql-secrets'
              namespace: '$(k8sNamespace)'
              secretType: generic
              secretArguments: |
                --from-literal=db_root_password=$(flask-blog-mysql-secrets)
          - task: KubernetesManifest@1
            displayName: Create MySQL credential secrets
            inputs:
              action: createSecret
              secretName: 'flask-blog-mysql-auth'
              namespace: '$(k8sNamespace)'
              secretType: generic
              secretArguments: |
                --from-literal=username=$(flask-blog-mysql-auth-username) --from-literal=password=$(flask-blog-mysql-auth-password)
          - task: KubernetesManifest@0
            displayName: Create flask app key secret
            inputs:
              action: createSecret
              secretName: 'flask-blog-secret-key'
              namespace: '$(k8sNamespace)'
              secretType: generic
              secretArguments: |
                --from-literal=flask_app_secret_key=$(flask-blog-secret-key)
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy MySQL to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'AKS-UPM-PFG-Production-python-blog'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/mysql-db-configmap.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-persistance.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-statefulset.yaml
                $(Pipeline.Workspace)/manifests/mysql-db-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository-mysql):$(tag)
          
          - task: KubernetesManifest@0
            displayName: Deploy Flask to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'AKS-UPM-PFG-Production-python-blog'
              namespace: '$(k8sNamespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/flask-deployment.yaml
                $(Pipeline.Workspace)/manifests/flask-service.yaml
                $(Pipeline.Workspace)/manifests/flask-ingress.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository-python):$(tag)


